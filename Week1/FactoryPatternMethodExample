package DesignPatternsAndPrinciples;
public class FactoryMethodPatternExample {
    public static void main(String[] args) {
        DocumentFactory factory = new DocumentFactory();

        Document  word = factory.createDocument("word");
        word.create();

        Document  pdf = factory.createDocument("pdf");
        pdf.create();

        Document excel=factory.createDocument("excel");
        excel.create();
    }
}

interface Document{
   void create();
}


// Car.java
class WordDocument implements Document{
    public void create() {
        System.out.println("Word Document is created ");
    }
}

class PdfDocument implements Document {
    public void create() {
        System.out.println("Pdf Document is created");
    }
}

class ExcelDocument implements Document{
    public void create () {
        System.out.println("Excel Sheet is Created ");
    }
}
class DocumentFactory {
    public  Document createDocument(String type) {
        if (type.equalsIgnoreCase("word")) {
            return new WordDocument();
        } else if (type.equalsIgnoreCase("pdf")) {
            return new PdfDocument();
        } else if (type.equalsIgnoreCase("excel")){
            return new ExcelDocument(); // or throw exception
        }
        return null;
    }
}



